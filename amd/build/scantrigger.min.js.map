{"version":3,"file":"scantrigger.min.js","sources":["../src/scantrigger.js"],"sourcesContent":["import * as config from 'core/config';\n\nexport const init = () => {\n    console.log('âœ… plagiarism_origai/scantrigger loaded!');\n    /**\n     * Starts polling given scan ID and element\n     */\n    const startPolling = (pollElement) => {\n        const pollId = pollElement.getAttribute('data-plagiarism_origa-poll-scanid');\n        const pollInterval = parseInt(pollElement.getAttribute('data-plagiarism_origa-poll-interval'), 10) || 5000;\n        const cmid = pollElement.getAttribute('data-plagiarism_origa-cmid');\n        const coursemodule = pollElement.getAttribute('data-plagiarism_origa-coursemodule');\n        const sesskey = pollElement.getAttribute('data-plagiarism_origa-sesskey');\n\n        const pollsearchparam = new URLSearchParams({\n            scanid: pollId,\n            returnurl: window.location.href,\n            cmid,\n            coursemodule,\n            sesskey\n        });\n\n        const pollUrl = `${config.wwwroot}/plagiarism/origai/poll_scan.php?${pollsearchparam.toString()}`;\n\n        const pollFunction = () => {\n            fetch(pollUrl, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(response => response.json())\n              .then(data => {\n                  if (data.status === 'completed') {\n                      clearInterval(pollIntervalId);\n                      pollElement.outerHTML = data.renderhtml;\n                  }\n              })\n              .catch(error => {\n                  console.error('Polling error:', error);\n              });\n        };\n\n        const pollIntervalId = setInterval(pollFunction, pollInterval);\n    };\n\n    // Attach polling to static DOM\n    setTimeout(() => {\n        const pollActions = document.querySelectorAll('[data-plagiarism_origa-poll-scanid]');\n        console.log({pollActions});\n        pollActions.forEach(pollAction => {\n            startPolling(pollAction);\n        });\n    }, 500);\n\n    // Click handler for triggering scan\n    document.body.addEventListener('click', function(event) {\n        const target = event.target.closest('[data-plagiarism_origa-trigger-scanid]');\n        if (target && target.tagName == 'A') {\n            event.preventDefault();\n            if (!(target instanceof HTMLAnchorElement)) {\n                console.warn(\"Target is not an anchor element\");\n                return;\n            }\n\n            const url = new URL(target.href);\n            const cmid = url.searchParams.get('cmid');\n            const coursemodule = url.searchParams.get('coursemodule');\n            const sesskey = url.searchParams.get('sesskey');\n            const returnurl = url.searchParams.get('returnurl');\n            const scantype = url.searchParams.get('scantype');\n            const scanId = target.getAttribute('data-plagiarism_origa-trigger-scanid');\n\n            const scanUrl = `${config.wwwroot}/plagiarism/origai/scan_content.php`;\n            const bodyParams = {\n                scanid: scanId,\n                isasync: 1,\n                cmid,\n                coursemodule,\n                sesskey,\n                returnurl\n            };\n\n            fetch(scanUrl + '?' + new URLSearchParams(bodyParams), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify(bodyParams)\n            }).then(response => response.json())\n            .then(data => {\n                target.outerHTML = data.renderhtml;\n\n                if (data.status === 'success') {\n                    // Wait for DOM to update, then find the new poll element and start polling\n                    requestAnimationFrame(() => {\n                        const newPollEl = document.querySelector(`[data-plagiarism_origa-poll-scanid=\"${scanId}\"]`);\n                        if (newPollEl) {\n                            startPolling(newPollEl);\n                        } else {\n                            if (config.display) {\n                                console.warn('No poll element found after scan trigger for scanId:', scanId);\n                            }\n                        }\n                    });\n                }\n                return;\n            })\n            .catch(() => {\n                target.outerHTML = `\n                    <div class=\"origai-section\">\n                        <h3 class=\"origai-section-title\">${scantype === 'ai' ? 'AI Check' : 'Plagiarism Check'}</h3>\n                        <div class=\"d-flex align-items-center text-danger\">\n                            <i class=\"fa fa-exclamation-circle me-2\"\n                                title=\"Scan failed\" aria-label=\"Scan failed\" data-toggle=\"tooltip\"></i>\n                            Scan failed\n                        </div>\n                    </div>`;\n            });\n        }\n\n    });\n};\n"],"names":["console","log","startPolling","pollElement","pollId","getAttribute","pollInterval","parseInt","cmid","coursemodule","sesskey","pollsearchparam","URLSearchParams","scanid","returnurl","window","location","href","pollUrl","config","wwwroot","toString","pollIntervalId","setInterval","fetch","method","headers","then","response","json","data","status","clearInterval","outerHTML","renderhtml","catch","error","setTimeout","pollActions","document","querySelectorAll","forEach","pollAction","body","addEventListener","event","target","closest","tagName","preventDefault","HTMLAnchorElement","warn","url","URL","searchParams","get","scantype","scanId","scanUrl","bodyParams","isasync","JSON","stringify","requestAnimationFrame","newPollEl","querySelector","display"],"mappings":"smCAEoB,KAChBA,QAAQC,IAAI,iDAINC,aAAgBC,oBACZC,OAASD,YAAYE,aAAa,qCAClCC,aAAeC,SAASJ,YAAYE,aAAa,uCAAwC,KAAO,IAChGG,KAAOL,YAAYE,aAAa,8BAChCI,aAAeN,YAAYE,aAAa,sCACxCK,QAAUP,YAAYE,aAAa,iCAEnCM,gBAAkB,IAAIC,gBAAgB,CACxCC,OAAQT,OACRU,UAAWC,OAAOC,SAASC,KAC3BT,KAAAA,KACAC,aAAAA,aACAC,QAAAA,UAGEQ,kBAAaC,OAAOC,oDAA2CT,gBAAgBU,YAqB/EC,eAAiBC,aAnBF,KACjBC,MAAMN,QAAS,CACXO,OAAQ,MACRC,QAAS,gBACW,0BACN,sBAEfC,MAAKC,UAAYA,SAASC,SAC1BF,MAAKG,OACkB,cAAhBA,KAAKC,SACLC,cAAcV,gBACdnB,YAAY8B,UAAYH,KAAKI,eAGpCC,OAAMC,QACHpC,QAAQoC,MAAM,iBAAkBA,YAIO9B,eAIrD+B,YAAW,WACDC,YAAcC,SAASC,iBAAiB,uCAC9CxC,QAAQC,IAAI,CAACqC,YAAAA,cACbA,YAAYG,SAAQC,aAChBxC,aAAawC,iBAElB,KAGHH,SAASI,KAAKC,iBAAiB,SAAS,SAASC,aACvCC,OAASD,MAAMC,OAAOC,QAAQ,6CAChCD,QAA4B,KAAlBA,OAAOE,QAAgB,IACjCH,MAAMI,mBACAH,kBAAkBI,+BACpBlD,QAAQmD,KAAK,yCAIXC,IAAM,IAAIC,IAAIP,OAAO7B,MACrBT,KAAO4C,IAAIE,aAAaC,IAAI,QAC5B9C,aAAe2C,IAAIE,aAAaC,IAAI,gBACpC7C,QAAU0C,IAAIE,aAAaC,IAAI,WAC/BzC,UAAYsC,IAAIE,aAAaC,IAAI,aACjCC,SAAWJ,IAAIE,aAAaC,IAAI,YAChCE,OAASX,OAAOzC,aAAa,wCAE7BqD,kBAAavC,OAAOC,+CACpBuC,WAAa,CACf9C,OAAQ4C,OACRG,QAAS,EACTpD,KAAAA,KACAC,aAAAA,aACAC,QAAAA,QACAI,UAAAA,WAGJU,MAAMkC,QAAU,IAAM,IAAI9C,gBAAgB+C,YAAa,CACnDlC,OAAQ,OACRC,QAAS,gBACW,0BACN,oBAEdiB,KAAMkB,KAAKC,UAAUH,cACtBhC,MAAKC,UAAYA,SAASC,SAC5BF,MAAKG,OACFgB,OAAOb,UAAYH,KAAKI,WAEJ,YAAhBJ,KAAKC,QAELgC,uBAAsB,WACZC,UAAYzB,SAAS0B,4DAAqDR,cAC5EO,UACA9D,aAAa8D,WAET7C,OAAO+C,SACPlE,QAAQmD,KAAK,uDAAwDM,cAOxFtB,OAAM,KACHW,OAAOb,iIAEiD,OAAbuB,SAAoB,WAAa"}